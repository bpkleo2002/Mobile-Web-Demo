{
    "title": "5. Data",

    "slides": [
        {
            "title": "Content",
            "bullets": [
                "Offline capabilities",
                "HTML5 APIs for local storage",
                "JSON format",
                "Ajax and network requests with jQuery"
            ]
        },
        {
            "title": "Recap and app building blocks",
            "bullets": [
                ["All application buildning requires a foundation", 
                    "A language in which to write instructions - JavaScript",
                    "A library with pre-defined features - HTML5 APIs and JavaScript libraries"],
                ["And three building blocks", 
                    "Model - the data (this chapter)",
                    "View - the presentation (html, css)",
                    "Controller - events and event handlers"],
                ["The MVC model",
                    "Isolating the building blocks from each other means more maintainable code"]
            ]
        },
        {
            "title": "Offline capabilities",
            "bullets": [
                "As a default, mobile web apps require a network connection",
                ["HTML5 introduces offline capabilities", "Specify what files should be kept and used if no network", "Will load web app from internet address even without network"],
                ["Easy to configure", "The difficult part has more to do with data synchronization issues, assuming the web app stores/changes data that needs to be stored on server"],
                ["Limitation", "Not defined in the standard", "Don't expect more than 5 MB per site for mobile"]
            ]
        },
        {
            "title": "Offline manifest",
            "bullets": [
                ["Turn on in html element", "<html manifest=\"offline.manifest\">"],
                ["Create text file offline.manifest", "Web server must send file as mime type text/cache-manifest"],
                ["Content", "CACHE MANIFEST\nindex.html\nstyle.css\nlib/helper.js\nhttp://site.com/somelib.js"]
            ]
        },
        {
            "title": "Data storage in the browser",
            "bullets": [
                ["JavaScript variables", "Are not persistant in any way. Any browser reload will reset/empty the value."],
                ["Cookies", "Usually set by server in a response", "Always sent back by browser to server", "Can also be set on the client side with JavaScript", "Limited to 4 kB per cookie and 20 per site (recommended)"],
                ["HTML5 Web Storage (also known as Local Storage)", "Ability to store string values by name in the browser", "Never sent to the server", "Asks for permissions before storing on desktop"],
                ["Web SQL Database", "Supported on Android+iOS but dropped as specification by W3C. Not in course."]
            ]
        },
        {
            "title": "HTML5 Local Storage",
            "bullets": [
                ["Limitation", 
                    "Not defined in the standard",
                    "Don't expect more than 5 MB per site for mobile",
                    "Offline cache and local storage is the same bucket",
                    "Note that utf-8 is stored as unicode, meaning half amount in character count", 
                    "High probability to store more with user message allowing to increase in steps of 5 MB"],
                ["Stored data is always a string",
                    "Means that all other data objects need to be converted to a string",
                    "Simple values can easily be converted with .toString() in JavaScript",
                    "Solution for more complex objects is JSON"]
            ]
        },
        {
            "title": "HTML5 Local Storage API",
            "bullets": [
                ["Available in window object", "if (\"localStorage\" in window) { }"],
                ["Store a string", "window.localStorage.setItem(\"name\", \"Mike\");"],
                ["Read a string", "var data = window.localStorage.getItem(\"name\");"],
                ["Non-existant values will be null", "if (data!=null) { alert(\"Yes, we have data!\"); }"]
            ]
        },
        {
            "title": "JSON",
            "bullets": [
                "JavaScript Object Notation",
                ["Data format derived from JavaScript", "Meaning it is parseable according to JavaScript language rules"],
                "Replacement for XML",
                ["Objects with properties", "Properties has a name and a value", "Arrays of objects or values"]
            ]
        },
        {
            "title": "JSON format",
            "bullets": [
                ["Values", "4, 3.1415, \"John\", true, null"],
                ["Objects", 
                    "Has properties with values",
                    "Property has a name which is always a string",
                    "For JSON, name must be within quotes (optional for JavaScript)",
                    "{ \"name\": \"John\", \"age\": 25 }"],
                ["Arrays", "[ \"John\", 25 ]", "[ { \"name\": \"John\", \"age\": 25 }, { \"name\": \"Alice\", \"age\": 33 } ]"]
            ]
        },
        {
            "title": "JSON in JavaScript code",
            "bullets": [
                ["JavaScript objects", "var obj = [4, { title: \"School\" }];", "var thetitle = obj[1].title;"],
                ["Convert from string to JavaScript objects", 
                    "Old way using eval(\"{ }\") function",
                    "New way from ECMAScript 5",
                    "var obj = JSON.parse(\"{ }\");"],
                ["Convert from JavaScript objects to string", 
                    "Only in ECMAScript 5, but good browser support", 
                    "var str = JSON.stringify(obj);", 
                    "Library for older browsers https://github.com/douglascrockford/JSON-js"]
            ]
        },
        {
            "title": "JSON in separate file",
            "bullets": [
                ["Reasons",
                    "Don't want to clutter JavaScript code with a lot of data",
                    "JSON data is delivered from other source (database) using server side scripting",
                    "Separation of data (JSON) and the controlling JavaScript code"],
                ["Script includes",
                    "<script src=\"big-data-file.json\"></script>",
                    "Wrap the data with a named variable",
                    "var bigData = [\n { muchInfo: 123456789 },\n { ... }\n];"]
            ]
        },
        {
            "title": "Ajax",
            "bullets": [
                ["Asynchronous JavaScript And Xml", "However, nowadays JSON is more common than Xml", "Use JavaScript to get data from server without reloading the whole page", "Asynchronous means that browser will be responsive while waiting for reply"],
                ["Browser differences exists", "Will therefore only use jQuery to hide that difficulty"],
                ["Use cases", "Fetch structured data", "Fetch html and insert/replace in page", "Send forms and inputed data to server"]
            ]
        },
        {
            "title": "Network requests with jQuery",
            "bullets": [
                ["Usage", "There are more functions but they are only shortcuts to the generic one", "$.ajax({ });", "Single argument is a collection of name/value pairs for the request and response"],
                ["Specify", "url: \"moredata.php\"", "dataType: \"json\"", "success: functionWhenOk", "error: functionWhenError"]
            ]
        },
        {
            "title": "When the request has finished",
            "bullets": [
                ["Success function", "functionWhenOk(data) { }", "data will be a JavaScript object when JSON is returned"],
                ["Error function", "functionWhenError(xhr, status, err) { }", "xhr is the XMLHTTPRequest object", "status is a string with error category", "err is string with http status text if status==\"error\""]
            ]
        },
        {
            "title": "Network requests in the browser",
            "bullets": [
                "All cookies are sent as usual to the server",
                "Typically to the same site/domain as the html page was delivered from",
                ["Cross-domain requests",
                    "Blocked by browser",
                    "Security risk for sensitive data",
                    "Could for instance return your Facebook private data if currently logged in to Facebook while visiting spying site"],
                ["Allowed circumstances",
                    "Other site determines that data is NOT sensitive",
                    "Other site supports JSONP",
                    "Other site sends http header Access-Control-Allow-Origin: *"]
            ]
        },
        {
            "title": "JSONP for cross-domain requests",
            "bullets": [
                ["A web page can't request data from other domains for security reasons",
                    "It can, however, include a <script> tag reference to any domain",
                    "The JavaScript from the other domain is executed in the context of the current page",
                    "Thereby, data can be set or functions be called",
                    "Requires the cooperation of the other domain/site, must support JSONP"],
                ["Usage", "Works by specifying a function in the url to be called with the data",
                    "jQuery handles this automatically",
                    "Just add callback= parameter to url and jQuery will figure it out"]
            ]
        }
    ]
}

