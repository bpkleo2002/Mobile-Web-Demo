{
    "title": "4. Geolocation",

    "slides": [
        {
            "title": "Content",
            "bullets": [
                "Geolocation",
                "Maps",
                "Canvas"
            ]
        },
        {
            "title": "Geolocation",
            "bullets": [
                ["latitude", "Horizontal lines on the globe", "Position relative to the equator, positive for north, negative for south"],
                ["longitude", "Vertical lines on the globe", "Position relative to the Meridian that passes through Greenwich (London), positive for east, negative for west"],
                ["Unit", "Named degrees, minutes and seconds", "Usually just a decimal number"]
            ]
        },
        {
            "title": "Positioning - ways of determining geolocation",
            "bullets": [
                "GPS",
                "3G triangulation",
                "Wifi triangulation",
                "IP database"
            ]
        },
        {
            "title": "Geolocation API",
            "bullets": [
                "Not formally an HTML5 specification, but that's not important",
                "Available in all modern browsers (latest version)",
                "Always require the consent of the user",
                "No specific control over method used, just high or not high accuracy"
            ]
        },
        {
            "title": "Request the current location",
            "bullets": [
                ["Ensure geolocation exists", "if (\"geolocation\" in navigator) {"],
                ["Call getCurrentPosition with", "A function to be called when location is known", "A function to be called when an error occurs", "Settings in the form of an object with properties"],
                ["Usage", "navigator.geolocation.getCurrentPosition(whenFound, whenError, { timeout: 20000 });", "function whenFound(result) { }", "function whenError(error) { }"]

            ]
        },
        {
            "title": "Location result",
            "bullets": [
                ["The called function receives a single argument with", "result.coords for the position", "result.timestamp for the time when the location was read"],
                ["The position object then contains", "latitude", "longitude", "accuracy is position accuracy in meters", "altitude is meters above sea level, if available", "altitudeAccuracy is zero if altitude is not supported", "heading is direction/bearing, if available", "speed is movement in meters per second, if available"]
            ]
        },
        {
            "title": "Geo calculations",
            "bullets": [
                ["Distance between two locations", "Not as simple as using pythagoras theorem since earth is not flat", "Haversine formula", "Databases capable of calculating called \"spatial\""],
                ["Bearing (direction) to get from one location to another", "Specified in 0-360 degrees, where 0 is north, 90 is east etc"],
                ["The sun's movement over the sky", "Can be determined from location and the time of year"]
            ]
        },
        {
            "title": "Continuous location updates",
            "bullets": [
                "First of all, always a good strategy to retry getCurrentPosition if timed out",
                ["If you want continuous updates about position", "var handle = navigator.geolocation.watchPosition(whenNew, whenError, { timeo", "navigator.geolocation.clearWatch(handle);"],
                "If an error occurs, you need to call watchPosition again"
            ]
        },
        {
            "title": "Map services",
            "bullets": [
                "Access to maps from a (mobile) web browser",
                "Google Maps",
                "Microsoft Bing Maps",
                "OpenStreetMap",
                ["More services", "Yahoo Maps, Nokia Maps, ViaMichelin (EU), Streetmap (UK), Hitta (SE), Eniro (SE)"]
            ]
        },
        {
            "title": "Google Maps API",
            "bullets": [
                ["Include JavaScript widget", "<script src=\"http://maps.googleapis.com/maps/api/js?sensor=false\"></script>"],
                "Create an html element as placeholder for the map",
                ["Create a map with location", "var map = new google.maps.Map(document.getElementById(\"map\"), options);"],
                ["Create markers on the map", "var options = { map: mapElement, position: new google.maps.LatLng(57, 14), title: \"Abc\" };", "var mark = new google.maps.Marker(options);"]
            ]
        },
        {
            "title": "HTML5 Canvas Element",
            "bullets": [
                "New element that gives you pixel control of what is drawn",
                "Everything inside a canvas element must be drawn with JavaScript instructions",
                ["Use cases", "Animations with pixel perfect control, like games", "Dynamically created images, like charts"],
                "http://www.html5canvastutorials.com/"
            ]
        },
        {
            "title": "Use a canvas",
            "bullets": [
                ["Must have a defined size", "<canvas id=\"mycanvas\" width=\"600\" height=\"300\"></canvas>"],
                ["Usage", "var canvas = document.getElementById(\"mycanvas\");", "var context = canvas.getContext(\"2d\");"]
            ]
        },
        {
            "title": "Draw filled objects on the canvas",
            "bullets": [
                ["fillStyle - The color of filled objects drawn on the canvas", "context.fillStyle = \"#333399\";"],
                ["fillRect - Draw a filled rectangle on the canvas", "context.fillRect(20, 5, 100, 50);"],
                ["fill - Draw a filled area inside the current path", "context.fill();"]
            ]
        },
        {
            "title": "Draw lines on the canvas",
            "bullets": [
                ["beginPath, moveTo, lineTo, closePath - Specify lines to be drawn", "context.beginPath();\ncontext.moveTo(0, 0)\ncontext.lineTo(600, 0);\ncontext.closePath();"],
                ["strokeStyle - The color of drawn lines", "context.strokeStyle = \"#FFFFFF\";"],
                ["lineWidth - The thickness of drawn lines", "context.lineWidth = 1;"],
                ["stroke - Draw the lines for the currently defined path", "context.stroke();"]
            ]
        },
        {
            "title": "Draw text on the canvas",
            "bullets": [
                ["Set style", "context.font = \"24pt sans-serif\";"],
                ["fillText - draw text with the current fill style", "context.fillText(\"Title\", 100, 0);"],
                ["strokeText - draw text as an outline with the current stroke style", "context.strokeText(\"Title\", 100, 50);"]
            ]
        },
        {
            "title": "Create image from canvas",
            "bullets": [
                "The result of a canvas can be used as an image in other parts of the page",
                ["Returned as a data url, similar to inline images", "var url = canvas.toDataURL();"],
                ["Set anywhere an image is valid", "imgElement.src = url;", "divElement.style.backgroundImage = url;"]
            ]
        },
        {
            "title": "Animations on canvas",
            "bullets": [
                "There is no built in animation support for whatever is shown on the canvas",
                "In order to animate things on the canvas, you need to erase and repaint",
                ["Calling a function continuously", "window.setInterval(myFunc, 100);"]
            ]
        }
    ]
}

